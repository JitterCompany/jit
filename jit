#!/usr/bin/env bash


DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

CONFIG_FILE="$DIR/config.cfg"
CONFIG_EXAMPLE="$DIR/config.example"

if [[ ! -f $CONFIG_FILE ]]; then
    cp $CONFIG_EXAMPLE $CONFIG_FILE
    read -p "Please edit your config file! [OK]"
    vim $CONFIG_FILE
fi

. $CONFIG_FILE

if [[ ! -d $LOG_DIR ]]; then
    echo "Note: directory '$LOG_DIR' does not exist."
    if [[ -d $TEMP_DIR ]]; then
        printf "‚ùóÔ∏è Using temp dir $TEMP_DIR instead. \nData will be synced to $LOG_DIR when it is available again.\n\n"
        LOG_DIR=$TEMP_DIR
    else
        echo "üö´ Please create it manually or update the config file"
        exit -2
    fi
else
    echo "‚úÖ Accessing jit directory '$LOG_DIR'"


    if [[ -d $TEMP_DIR ]]; then

        NUM_FILES=$(ls -1q $TEMP_DIR | wc -l)
        if [[ NUM_FILES -ge 1 ]]; then
            echo "üöÄ Moving $NUM_FILES files from $TEMP_DIR to $LOG_DIR"
            cp $TEMP_DIR/*.md $LOG_DIR
            if [[ $? -eq 0 ]]; then
                rm $TEMP_DIR/*.md
            else
                echo 'üö´ Copying failed..'
            fi
        fi
    fi
fi


if [ $# -le 0 ]; then
    echo "Usage '$(basename "$0") <log-name>'"
    echo ""
    echo "or: '$(basename "$0") -p <project-code>'"

    echo "Existing logs:"
    ls "$LOG_DIR" | cat | grep "\.md$" | sed "s/^[0-9]*-[0-9]*-[0-9]*_//" | sed "s/\.md//"

    exit -1
fi

CURR_DATE=$(date +'%Y-%m-%d')

if [[ $1 = "-p" ]]; then

    if [[ $# -le 1 ]]; then
        echo "provide a project code"
        echo "Usage '$(basename "$0") -p <project-code>'"
        exit -1
    fi
    echo "new log entry for project code $2"

    PROJECT_CODE=$2
    TITLE=${CURR_DATE}_${PROJECT_CODE}
    # exit 0;

else
    # if arg 1 is not '-p' then it will be the note title
    TITLE="$1"
fi

LOGFILE_PATTERN="$LOG_DIR/*${TITLE}.md"

if [ ! -f $LOGFILE_PATTERN ]; then
    echo "no file $LOGFILE_PATTERN"
    LOGFILE_NAME="$LOG_DIR/${CURR_DATE}_${TITLE}.md"
    echo "New log entry '$TITLE'"
    if [[ -z $PROJECT_CODE ]]; then
        read -p "Project code? " PROJECT_CODE
    fi

    if [[ "$PROJECT_CODE" =~ [^a-zA-Z0-9] || "$PROJECT_CODE" == "" ]]; then
        echo "üö´ invalid project code: use [^a-zA-Z0-9] or press enter for default"
        read -p "Project code? [0000]" PROJECT_CODE
        PROJECT_CODE=${PROJECT_CODE:-0000}
        # if still wrong we just replace it with 0000
        if [[ "$PROJECT_CODE" =~ [^a-zA-Z0-9] || "$PROJECT_CODE" == "" ]]; then
            PROJECT_CODE=0000
        fi
    fi

    read -p "Tags? (csv) " TAGS

    echo "---" > $LOGFILE_NAME
    echo "title: $TITLE" >> $LOGFILE_NAME
    echo "date: $CURR_DATE" >> $LOGFILE_NAME
    echo "author: $AUTHOR" >> $LOGFILE_NAME
    echo "project: $PROJECT_CODE" >> $LOGFILE_NAME
    echo "tags:" >> $LOGFILE_NAME
    # remove trailing comma if any | replace comma with newline | add dash and white space |
    echo $TAGS | sed 's/,*$//' | tr "," "\n" | awk '{print "  - " $1 }' >> $LOGFILE_NAME
    echo "---" >> $LOGFILE_NAME
    echo "" >> $LOGFILE_NAME
    echo "" >> $LOGFILE_NAME
fi

if [[ "$2" == "--cat" ]]; then
    cat + $LOGFILE_PATTERN
else
    vim + $LOGFILE_PATTERN
fi
